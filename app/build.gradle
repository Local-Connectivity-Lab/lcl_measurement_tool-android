plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'kotlin-android'
    id 'com.google.dagger.hilt.android'
    id "com.google.protobuf" version "0.8.17"
    id "kotlinx-serialization"
}

def getVersionCodeFromProperties() {
    def propsFile = file('version.properties')
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))

        if (props['versionCode'] == null) {
            throw new GradleException("versionCode not found in the version.properties")
        }

        return props['versionCode'].toInteger()
    }
    throw new GradleException("The version.properties file was not found.")
}

def getVersionNameFromProperties() {
    def propsFile = file('version.properties')

    if (!propsFile.exists()) {
        throw new GradleException("'version.properties' file not found. Please create it.")
    }

    def props = new Properties()
    props.load(new FileInputStream(propsFile))

    def requiredKeys = ['versionMajor', 'versionMinor', 'versionPatch']
    requiredKeys.each { key ->
        if (!props.containsKey(key)) {
            throw new GradleException("Required key '$key' is missing from version.properties.")
        }
    }

    def major = props['versionMajor'].toInteger()
    def minor = props['versionMinor'].toInteger()
    def patch = props['versionPatch'].toInteger()

    return "$major.$minor.$patch"
}

android {
    compileSdkVersion 34
    buildToolsVersion "30.0.3"
    ndkVersion "23.1.7779620"
    defaultConfig {
        applicationId "com.lcl.lclmeasurementtool"
        minSdkVersion 24
        targetSdkVersion 34
        versionCode getVersionCodeFromProperties()
        versionName getVersionNameFromProperties()
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

        // Required when setting minSdkVersion to 20 or lower according to <link>https://developer.android.com/studio/write/java8-support#library-desugaring</link>
        multiDexEnabled true
    }

    flavorDimensions "mode"
    productFlavors {

        dev {
            dimension "mode"
            versionNameSuffix "-dev"
        }

        demo {
            dimension "mode"
            versionNameSuffix "-demo"
        }

        full {
            dimension "mode"
            versionNameSuffix "-full"
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            // below will add the suffix to the *com.lcl.lclmeasurementtool* => **com.lcl.lclmeasurementtool.debug**
//            applicationIdSuffix ".debug"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildFeatures {
        viewBinding true
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion "1.4.4"
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    implementation project(":libndt7")

//    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Kotlin
    implementation 'androidx.core:core-ktx:1.10.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.5.0"

    // Worker
    implementation 'androidx.work:work-runtime-ktx:2.8.1'
    implementation "androidx.hilt:hilt-work:1.0.0"
    kapt "androidx.hilt:hilt-compiler:1.0.0"

    // Location Service
    implementation 'com.google.android.gms:play-services-location:21.0.1'

    // DB
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"

    // UI
    implementation 'androidx.navigation:navigation-fragment-ktx:2.5.3'
    implementation 'androidx.navigation:navigation-ui-ktx:2.5.3'
    def appCenterSdkVersion = '4.1.0'
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.2.2'
    def composeBom = platform('androidx.compose:compose-bom:2022.10.00')
    implementation composeBom
    androidTestImplementation composeBom
    implementation "androidx.compose.material3:material3:1.0.1"
    implementation "androidx.compose.material3:material3-window-size-class:1.0.1"
    implementation "androidx.lifecycle:lifecycle-runtime-compose:2.6.1"
    debugImplementation "androidx.compose.ui:ui-tooling-preview:1.3.2"
    implementation "androidx.compose.ui:ui-tooling:1.3.2"
    implementation "androidx.compose.material:material-icons-extended:1.3.1"
    implementation "androidx.navigation:navigation-compose:2.5.3"

    // datastore with protobuf preferences
    implementation "androidx.datastore:datastore-preferences:1.0.0"
    implementation "androidx.datastore:datastore:1.0.0"
    implementation  "com.google.protobuf:protobuf-javalite:3.21.12"

    // hilt dependency injection
    implementation 'com.google.dagger:hilt-android:2.44.2'
    implementation 'androidx.hilt:hilt-navigation-compose:1.0.0'
    kapt 'com.google.dagger:hilt-compiler:2.44.2'

    // start up runtime
    implementation "androidx.startup:startup-runtime:1.1.1"

    // third-party lib
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-scalars:2.9.0'
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    implementation 'com.github.kongzue.DialogX:DialogX:0.0.43.beta13'
    implementation 'com.github.getActivity:XXPermissions:16.6'
    implementation "io.github.g00fy2.quickie:quickie-bundled:1.6.0"
    implementation 'org.bouncycastle:bcpkix-jdk15to18:1.70'
    implementation 'org.bouncycastle:bcprov-jdk15to18:1.70'
    implementation 'org.apache.commons:commons-csv:1.9.0'
    implementation 'io.github.azhon:appupdate:4.3.2'

    // Analytics
    implementation "com.microsoft.appcenter:appcenter-analytics:${appCenterSdkVersion}"
    implementation "com.microsoft.appcenter:appcenter-crashes:${appCenterSdkVersion}"

    // Testing
    testImplementation 'junit:junit:4.+'
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.14.0"
    }

    // Generates the java Protobuf-lite code for the Protobufs in this project. See
    // https://github.com/google/protobuf-gradle-plugin#customizing-protobuf-compilation
    // for more information.
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option("lite")
                }
            }
        }
    }
}

kapt {
    correctErrorTypes true
}

def sortKeys(Properties properties) {
    Map<String, String> sortedMap = new TreeMap(properties)

    // Create a new Properties object and populate it from the sorted map.
    Properties sortedProps = new Properties()
    sortedProps.putAll(sortedMap)

    return sortedProps
}

task bumpVersionCode {
    doLast {
        def versionFile = file("version.properties")
        if (!versionFile.exists()) {
            throw new GradleException("version.properties file not found.")
        }

        Properties properties = new Properties()
        versionFile.withInputStream { stream -> properties.load(stream) }

        if (!properties.containsKey("versionCode")) {
            throw new GradleException("versionCode not found in the version.properties")
        }

        def versionCode = (properties["versionCode"]?.toInteger() ?: 0) + 1

        properties["versionCode"] = versionCode.toString()

        def sortedProperties = sortKeys(properties)
        versionFile.withOutputStream { stream ->
            sortedProperties.store(stream, null)
        }

        println "✅ Updated versionCode to: $versionCode"
    }
}

def updateVersionProperties(closure) {
    def propsFile = file('version.properties')
    def props = new Properties()
    if (propsFile.exists()) {
        props.load(new FileInputStream(propsFile))
    } else {
        throw new GradleException("version.properties file not found.")
    }

    if (!props.containsKey("versionMajor") || !props.containsKey("versionMinor") || !props.containsKey("versionPatch")) {
        throw new GradleException("version.properties is corrupted.")
    }

    // Pass the properties to the closure to be modified
    closure(props)

    // Save the updated properties
    def sortedProps = sortKeys(props)
    sortedProps.store(propsFile.newWriter(), null)
}

task bumpPatch {
    doLast {
        updateVersionProperties { props ->
            def patch = props['versionPatch'].toInteger() + 1
            def code = props['versionCode'].toInteger() + 1
            props['versionPatch'] = patch.toString()
            props['versionCode'] = code.toString()
            println "✅ Version updated to: ${props['versionMajor']}.${props['versionMinor']}.$patch (Code $code)"
        }
    }
}

task bumpMinor {
    doLast {
        updateVersionProperties { props ->
            def minor = props['versionMinor'].toInteger() + 1
            def code = props['versionCode'].toInteger() + 1
            props['versionMinor'] = minor.toString()
            props['versionPatch'] = "0" // Reset patch version
            props['versionCode'] = code.toString()
            println "✅ Version updated to: ${props['versionMajor']}.$minor.0 (Code $code)"
        }
    }
}

task bumpMajor {
    doLast {
        updateVersionProperties { props ->
            def major = props['versionMajor'].toInteger() + 1
            def code = props['versionCode'].toInteger() + 1
            props['versionMajor'] = major.toString()
            props['versionMinor'] = "0" // Reset minor version
            props['versionPatch'] = "0" // Reset patch version
            props['versionCode'] = code.toString()
            println "✅ Version updated to: $major.0.0 (Code $code)"
        }
    }
}